# -*- coding: utf-8 -*-
"""Image_Caption_Generator.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a0yp6tLxVlqC66qBGwiKxQMdbgqyAAg5

## New Section
Image_Caption_Generator by **Sai Brahmam**
"""

# Commented out IPython magic to ensure Python compatibility.
# install requirements
import sys
if 'google.colab' in sys.modules:
    print('Running in Colab.')
    !pip install transformers timm fairscale gradio
    !git clone https://github.com/salesforce/BLIP
#     %cd BLIP

import torch
import gradio as gr
from PIL import Image
from torchvision import transforms
from torchvision.transforms.functional import InterpolationMode
from models.blip import blip_decoder

# Define image preprocessing function
def preprocess_image(input_image):
    # Convert NumPy array to PIL Image and preprocess the image
    image = Image.fromarray(input_image).convert('RGB')
    transform = transforms.Compose([
        transforms.Resize((384, 384), interpolation=InterpolationMode.BICUBIC),
        transforms.ToTensor(),
        transforms.Normalize((0.48145466, 0.4578275, 0.40821073), (0.26862954, 0.26130258, 0.27577711))
    ])
    image = transform(image).unsqueeze(0)
    return image

# Load the model
model_url = 'https://storage.googleapis.com/sfr-vision-language-research/BLIP/models/model_base_capfilt_large.pth'
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model = blip_decoder(pretrained=model_url, image_size=384, vit='base').to(device)
model.eval()

# Define the captioning function
def generate_caption(input_image):
    with torch.no_grad():
        image = preprocess_image(input_image).to(device)
        num_captions = 3
        captions = [] 
        for i in range(num_captions):
            caption = model.generate(image, sample=True, top_p=0.9, max_length=20, min_length=5)
            captions.append(caption[0])
        return [caption for caption in captions]


# Define the Gradio interface
image = gr.inputs.Image(label="Input Image")
output_text = gr.outputs.Textbox(label="Output Captions")
gr.Interface(fn=generate_caption, inputs=image, outputs=output_text, capture_session=True).launch(debug =True)